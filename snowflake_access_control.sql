-- Your landing role should be ACCOUNTADMIN

-- Ideally, you should switch to SECURITYADMIN role to create users/roles.
-- Here we can simplify it by using ACCOUNTADMIN (superuser)
CREATE DATABASE JR_ML_DEMO; -- if you haven't created database yet.
USE ROLE SECURITYADMIN; -- Required to create users/roles
USE DATABASE JR_ML_DEMO;

-- ensure you are already in the database you defined.
CREATE SCHEMA PUBLIC; -- if you haven't created schema yet.
USE SCHEMA JR_ML_DEMO.PUBLIC;

-- set a new stage for data loading.
-- below approach is to setup a variable first, and then use IDENTIFIER to refer to it.
-- set directory is important to make your file system visible.
SET NEW_STAGE_NAME = 'JR_ML_STAGE';
CREATE OR REPLACE STAGE IDENTIFIER($NEW_STAGE_NAME);
ALTER STAGE IDENTIFIER($NEW_STAGE_NAME)
  SET DIRECTORY = ( ENABLE = TRUE );

-- now setup role
SET NEW_ROLE_NAME = 'JR_MLE';
CREATE OR REPLACE ROLE IDENTIFIER($NEW_ROLE_NAME);

-- warehouse is also an important concept in Snowflake.
SET NEW_WAREHOUSE_NAME = 'JR_ML_WH';
CREATE OR REPLACE WAREHOUSE IDENTIFIER($NEW_WAREHOUSE_NAME)
WAREHOUSE_SIZE = 'XSMALL'
AUTO_SUSPEND = 300
AUTO_RESUME = TRUE
INITIALLY_SUSPENDED = TRUE;


-- now setup user user to role mapping is a basic operation in RBAC (Role Based Access Control).
SET NEW_USER_NAME = 'ml_demo_user';
CREATE OR REPLACE USER IDENTIFIER($NEW_USER_NAME)
PASSWORD = 'MLdemoP$wd123'
MUST_CHANGE_PASSWORD = FALSE;

-- link role and user.
GRANT ROLE IDENTIFIER($NEW_ROLE_NAME) TO USER IDENTIFIER($NEW_USER_NAME);

-- grant access to use warehouse for the role (then user will inherit this access).
GRANT USAGE ON WAREHOUSE IDENTIFIER($NEW_WAREHOUSE_NAME) TO ROLE IDENTIFIER($NEW_ROLE_NAME);

-- Grant access to database, schema, and stage
GRANT USAGE ON DATABASE JR_ML_DEMO TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT USAGE ON SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT CREATE TABLE ON SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT READ, WRITE ON STAGE IDENTIFIER($NEW_STAGE_NAME) TO ROLE IDENTIFIER($NEW_ROLE_NAME);

-- Grant permission to create notebooks
GRANT CREATE NOTEBOOK ON SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);

-- Grant "create table" access to the schema
GRANT CREATE TABLE ON SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);

-- Grant all privileges on existing objects in the schema
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT ALL PRIVILEGES ON ALL VIEWS IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT ALL PRIVILEGES ON ALL PROCEDURES IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);

-- Grant full privileges on future objects (important for persistence)
GRANT ALL PRIVILEGES ON FUTURE TABLES IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT ALL PRIVILEGES ON FUTURE VIEWS IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT ALL PRIVILEGES ON FUTURE FUNCTIONS IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);
GRANT ALL PRIVILEGES ON FUTURE PROCEDURES IN SCHEMA JR_ML_DEMO.PUBLIC TO ROLE IDENTIFIER($NEW_ROLE_NAME);